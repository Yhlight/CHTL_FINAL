// CHTL Grammar for Pest

// Silent rules for whitespace and comments
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ block_comment | line_comment }
block_comment = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
line_comment = { "//" ~ (!("\r" | "\n") ~ ANY)* }

// Basic building blocks
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
string_literal = @{ "\"" ~ ( !("\"") ~ ANY )* ~ "\"" | "'" ~ ( !("'") ~ ANY )* ~ "'" }
bare_literal = @{ (ASCII_ALPHANUMERIC | "_" | "." | "/" | ":" | "-" )+ } // Simplified for now

// --- Top Level Structure ---
chtl_file = { SOI ~ file_content ~ EOI }
file_content = { (template_definition | element | text_node | style_block | script_block | COMMENT)* }

// --- Content inside an Element ---
element_content = { (attribute | element_template_usage | text_node | style_block | script_block | element | COMMENT)* }

element_template_usage = { "@Element" ~ identifier ~ ";" }

// --- Rules ---
template_definition = { "[Template]" ~ (style_template | element_template | var_template) }
style_template = { "@Style" ~ identifier ~ "{" ~ style_template_content ~ "}" }
style_template_content = { (property | style_template_usage | inherit_style)* }
style_template_usage = { "@Style" ~ identifier ~ ";" }
inherit_style = { "inherit" ~ "@Style" ~ identifier ~ ";" }
element_template = { "@Element" ~ identifier ~ "{" ~ (text_node | style_block | script_block | element | COMMENT)* ~ "}" }
var_template = { "@Var" ~ identifier ~ "{" ~ var_declaration* ~ "}" }

// This is a re-declaration of the property rule from css.pest, for use here.
property = { property_key ~ ":" ~ (string_literal | bare_literal) ~ (";" | &"}") }
property_key = @{ (ASCII_ALPHA | "-")+ }
var_declaration = { identifier ~ ":" ~ (string_literal | bare_literal) ~ (";" | &"}") }

attribute = { identifier ~ (":" | "=") ~ (string_literal | bare_literal) ~ ";" }

element = { identifier ~ "{" ~ element_content ~ "}" }
text_node = { "text" ~ "{" ~ (string_literal | bare_literal) ~ "}" }

style_block = { "style" ~ "{" ~ inner_block_content ~ "}" }
script_block = { "script" ~ "{" ~ inner_block_content ~ "}" }

// This rule captures any content inside a block with balanced braces.
inner_block_content = @{ ( "{" ~ inner_block_content ~ "}" | !("{" | "}") ~ ANY )* }
