# Generated from grammars/CHTL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,95,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,5,6,41,8,6,10,6,12,6,
        44,9,6,1,7,1,7,5,7,48,8,7,10,7,12,7,51,9,7,1,7,1,7,1,7,5,7,56,8,
        7,10,7,12,7,59,9,7,1,7,3,7,62,8,7,1,8,1,8,1,8,1,8,5,8,68,8,8,10,
        8,12,8,71,9,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,79,8,9,10,9,12,9,82,9,
        9,1,9,1,9,1,9,1,9,1,9,1,10,4,10,90,8,10,11,10,12,10,91,1,10,1,10,
        1,80,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,
        0,6,3,0,65,90,95,95,97,122,5,0,45,45,48,57,65,90,95,95,97,122,1,
        0,34,34,1,0,39,39,2,0,10,10,13,13,3,0,9,10,13,13,32,32,101,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,1,23,1,0,0,0,3,28,1,0,0,0,5,30,1,0,0,0,7,32,1,0,0,0,9,34,1,0,0,
        0,11,36,1,0,0,0,13,38,1,0,0,0,15,61,1,0,0,0,17,63,1,0,0,0,19,74,
        1,0,0,0,21,89,1,0,0,0,23,24,5,116,0,0,24,25,5,101,0,0,25,26,5,120,
        0,0,26,27,5,116,0,0,27,2,1,0,0,0,28,29,5,123,0,0,29,4,1,0,0,0,30,
        31,5,125,0,0,31,6,1,0,0,0,32,33,5,58,0,0,33,8,1,0,0,0,34,35,5,61,
        0,0,35,10,1,0,0,0,36,37,5,59,0,0,37,12,1,0,0,0,38,42,7,0,0,0,39,
        41,7,1,0,0,40,39,1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,
        0,43,14,1,0,0,0,44,42,1,0,0,0,45,49,5,34,0,0,46,48,8,2,0,0,47,46,
        1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,52,1,0,0,0,
        51,49,1,0,0,0,52,62,5,34,0,0,53,57,5,39,0,0,54,56,8,3,0,0,55,54,
        1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,60,1,0,0,0,
        59,57,1,0,0,0,60,62,5,39,0,0,61,45,1,0,0,0,61,53,1,0,0,0,62,16,1,
        0,0,0,63,64,5,47,0,0,64,65,5,47,0,0,65,69,1,0,0,0,66,68,8,4,0,0,
        67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,1,
        0,0,0,71,69,1,0,0,0,72,73,6,8,0,0,73,18,1,0,0,0,74,75,5,47,0,0,75,
        76,5,42,0,0,76,80,1,0,0,0,77,79,9,0,0,0,78,77,1,0,0,0,79,82,1,0,
        0,0,80,81,1,0,0,0,80,78,1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,84,
        5,42,0,0,84,85,5,47,0,0,85,86,1,0,0,0,86,87,6,9,0,0,87,20,1,0,0,
        0,88,90,7,5,0,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,0,0,0,91,92,
        1,0,0,0,92,93,1,0,0,0,93,94,6,10,0,0,94,22,1,0,0,0,8,0,42,49,57,
        61,69,80,91,1,6,0,0
    ]

class CHTLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TEXT = 1
    LBRACE = 2
    RBRACE = 3
    COLON = 4
    EQ = 5
    SEMI = 6
    IDENTIFIER = 7
    STRING = 8
    LINE_COMMENT = 9
    BLOCK_COMMENT = 10
    WS = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'text'", "'{'", "'}'", "':'", "'='", "';'" ]

    symbolicNames = [ "<INVALID>",
            "TEXT", "LBRACE", "RBRACE", "COLON", "EQ", "SEMI", "IDENTIFIER",
            "STRING", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "TEXT", "LBRACE", "RBRACE", "COLON", "EQ", "SEMI", "IDENTIFIER",
                  "STRING", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    grammarFileName = "CHTL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
