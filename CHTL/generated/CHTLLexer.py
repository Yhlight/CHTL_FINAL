# Generated from grammars/CHTL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,352,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,23,1,23,1,23,1,24,4,24,272,8,24,11,24,12,24,273,1,25,1,25,
        1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,34,1,34,1,35,1,35,5,35,298,8,35,10,35,12,35,301,
        9,35,1,36,1,36,5,36,305,8,36,10,36,12,36,308,9,36,1,36,1,36,1,36,
        5,36,313,8,36,10,36,12,36,316,9,36,1,36,3,36,319,8,36,1,37,1,37,
        1,37,1,37,5,37,325,8,37,10,37,12,37,328,9,37,1,37,1,37,1,38,1,38,
        1,38,1,38,5,38,336,8,38,10,38,12,38,339,9,38,1,38,1,38,1,38,1,38,
        1,38,1,39,4,39,347,8,39,11,39,12,39,348,1,39,1,39,1,337,0,40,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,1,0,7,1,0,48,57,3,0,65,90,95,95,97,122,5,
        0,45,45,48,57,65,90,95,95,97,122,1,0,34,34,1,0,39,39,2,0,10,10,13,
        13,3,0,9,10,13,13,32,32,359,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,0,0,3,90,1,0,0,0,5,102,1,0,0,0,
        7,118,1,0,0,0,9,129,1,0,0,0,11,138,1,0,0,0,13,144,1,0,0,0,15,152,
        1,0,0,0,17,159,1,0,0,0,19,168,1,0,0,0,21,173,1,0,0,0,23,180,1,0,
        0,0,25,187,1,0,0,0,27,193,1,0,0,0,29,200,1,0,0,0,31,208,1,0,0,0,
        33,211,1,0,0,0,35,215,1,0,0,0,37,222,1,0,0,0,39,227,1,0,0,0,41,230,
        1,0,0,0,43,244,1,0,0,0,45,259,1,0,0,0,47,265,1,0,0,0,49,271,1,0,
        0,0,51,275,1,0,0,0,53,277,1,0,0,0,55,279,1,0,0,0,57,281,1,0,0,0,
        59,283,1,0,0,0,61,285,1,0,0,0,63,287,1,0,0,0,65,289,1,0,0,0,67,291,
        1,0,0,0,69,293,1,0,0,0,71,295,1,0,0,0,73,318,1,0,0,0,75,320,1,0,
        0,0,77,331,1,0,0,0,79,346,1,0,0,0,81,82,5,91,0,0,82,83,5,73,0,0,
        83,84,5,109,0,0,84,85,5,112,0,0,85,86,5,111,0,0,86,87,5,114,0,0,
        87,88,5,116,0,0,88,89,5,93,0,0,89,2,1,0,0,0,90,91,5,91,0,0,91,92,
        5,78,0,0,92,93,5,97,0,0,93,94,5,109,0,0,94,95,5,101,0,0,95,96,5,
        115,0,0,96,97,5,112,0,0,97,98,5,97,0,0,98,99,5,99,0,0,99,100,5,101,
        0,0,100,101,5,93,0,0,101,4,1,0,0,0,102,103,5,91,0,0,103,104,5,67,
        0,0,104,105,5,111,0,0,105,106,5,110,0,0,106,107,5,102,0,0,107,108,
        5,105,0,0,108,109,5,103,0,0,109,110,5,117,0,0,110,111,5,114,0,0,
        111,112,5,97,0,0,112,113,5,116,0,0,113,114,5,105,0,0,114,115,5,111,
        0,0,115,116,5,110,0,0,116,117,5,93,0,0,117,6,1,0,0,0,118,119,5,91,
        0,0,119,120,5,84,0,0,120,121,5,101,0,0,121,122,5,109,0,0,122,123,
        5,112,0,0,123,124,5,108,0,0,124,125,5,97,0,0,125,126,5,116,0,0,126,
        127,5,101,0,0,127,128,5,93,0,0,128,8,1,0,0,0,129,130,5,91,0,0,130,
        131,5,67,0,0,131,132,5,117,0,0,132,133,5,115,0,0,133,134,5,116,0,
        0,134,135,5,111,0,0,135,136,5,109,0,0,136,137,5,93,0,0,137,10,1,
        0,0,0,138,139,5,64,0,0,139,140,5,67,0,0,140,141,5,104,0,0,141,142,
        5,116,0,0,142,143,5,108,0,0,143,12,1,0,0,0,144,145,5,64,0,0,145,
        146,5,67,0,0,146,147,5,111,0,0,147,148,5,110,0,0,148,149,5,102,0,
        0,149,150,5,105,0,0,150,151,5,103,0,0,151,14,1,0,0,0,152,153,5,64,
        0,0,153,154,5,83,0,0,154,155,5,116,0,0,155,156,5,121,0,0,156,157,
        5,108,0,0,157,158,5,101,0,0,158,16,1,0,0,0,159,160,5,64,0,0,160,
        161,5,69,0,0,161,162,5,108,0,0,162,163,5,101,0,0,163,164,5,109,0,
        0,164,165,5,101,0,0,165,166,5,110,0,0,166,167,5,116,0,0,167,18,1,
        0,0,0,168,169,5,64,0,0,169,170,5,86,0,0,170,171,5,97,0,0,171,172,
        5,114,0,0,172,20,1,0,0,0,173,174,5,105,0,0,174,175,5,110,0,0,175,
        176,5,115,0,0,176,177,5,101,0,0,177,178,5,114,0,0,178,179,5,116,
        0,0,179,22,1,0,0,0,180,181,5,100,0,0,181,182,5,101,0,0,182,183,5,
        108,0,0,183,184,5,101,0,0,184,185,5,116,0,0,185,186,5,101,0,0,186,
        24,1,0,0,0,187,188,5,97,0,0,188,189,5,102,0,0,189,190,5,116,0,0,
        190,191,5,101,0,0,191,192,5,114,0,0,192,26,1,0,0,0,193,194,5,98,
        0,0,194,195,5,101,0,0,195,196,5,102,0,0,196,197,5,111,0,0,197,198,
        5,114,0,0,198,199,5,101,0,0,199,28,1,0,0,0,200,201,5,114,0,0,201,
        202,5,101,0,0,202,203,5,112,0,0,203,204,5,108,0,0,204,205,5,97,0,
        0,205,206,5,99,0,0,206,207,5,101,0,0,207,30,1,0,0,0,208,209,5,97,
        0,0,209,210,5,116,0,0,210,32,1,0,0,0,211,212,5,116,0,0,212,213,5,
        111,0,0,213,214,5,112,0,0,214,34,1,0,0,0,215,216,5,98,0,0,216,217,
        5,111,0,0,217,218,5,116,0,0,218,219,5,116,0,0,219,220,5,111,0,0,
        220,221,5,109,0,0,221,36,1,0,0,0,222,223,5,102,0,0,223,224,5,114,
        0,0,224,225,5,111,0,0,225,226,5,109,0,0,226,38,1,0,0,0,227,228,5,
        97,0,0,228,229,5,115,0,0,229,40,1,0,0,0,230,231,5,95,0,0,231,232,
        5,95,0,0,232,233,5,115,0,0,233,234,5,116,0,0,234,235,5,121,0,0,235,
        236,5,108,0,0,236,237,5,101,0,0,237,238,5,95,0,0,238,239,5,114,0,
        0,239,240,5,101,0,0,240,241,5,102,0,0,241,242,5,95,0,0,242,243,5,
        95,0,0,243,42,1,0,0,0,244,245,5,95,0,0,245,246,5,95,0,0,246,247,
        5,115,0,0,247,248,5,99,0,0,248,249,5,114,0,0,249,250,5,105,0,0,250,
        251,5,112,0,0,251,252,5,116,0,0,252,253,5,95,0,0,253,254,5,114,0,
        0,254,255,5,101,0,0,255,256,5,102,0,0,256,257,5,95,0,0,257,258,5,
        95,0,0,258,44,1,0,0,0,259,260,5,115,0,0,260,261,5,116,0,0,261,262,
        5,121,0,0,262,263,5,108,0,0,263,264,5,101,0,0,264,46,1,0,0,0,265,
        266,5,116,0,0,266,267,5,101,0,0,267,268,5,120,0,0,268,269,5,116,
        0,0,269,48,1,0,0,0,270,272,7,0,0,0,271,270,1,0,0,0,272,273,1,0,0,
        0,273,271,1,0,0,0,273,274,1,0,0,0,274,50,1,0,0,0,275,276,5,46,0,
        0,276,52,1,0,0,0,277,278,5,40,0,0,278,54,1,0,0,0,279,280,5,41,0,
        0,280,56,1,0,0,0,281,282,5,123,0,0,282,58,1,0,0,0,283,284,5,125,
        0,0,284,60,1,0,0,0,285,286,5,91,0,0,286,62,1,0,0,0,287,288,5,93,
        0,0,288,64,1,0,0,0,289,290,5,58,0,0,290,66,1,0,0,0,291,292,5,61,
        0,0,292,68,1,0,0,0,293,294,5,59,0,0,294,70,1,0,0,0,295,299,7,1,0,
        0,296,298,7,2,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,
        0,299,300,1,0,0,0,300,72,1,0,0,0,301,299,1,0,0,0,302,306,5,34,0,
        0,303,305,8,3,0,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,
        0,306,307,1,0,0,0,307,309,1,0,0,0,308,306,1,0,0,0,309,319,5,34,0,
        0,310,314,5,39,0,0,311,313,8,4,0,0,312,311,1,0,0,0,313,316,1,0,0,
        0,314,312,1,0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,316,314,1,0,0,
        0,317,319,5,39,0,0,318,302,1,0,0,0,318,310,1,0,0,0,319,74,1,0,0,
        0,320,321,5,47,0,0,321,322,5,47,0,0,322,326,1,0,0,0,323,325,8,5,
        0,0,324,323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,
        0,0,327,329,1,0,0,0,328,326,1,0,0,0,329,330,6,37,0,0,330,76,1,0,
        0,0,331,332,5,47,0,0,332,333,5,42,0,0,333,337,1,0,0,0,334,336,9,
        0,0,0,335,334,1,0,0,0,336,339,1,0,0,0,337,338,1,0,0,0,337,335,1,
        0,0,0,338,340,1,0,0,0,339,337,1,0,0,0,340,341,5,42,0,0,341,342,5,
        47,0,0,342,343,1,0,0,0,343,344,6,38,0,0,344,78,1,0,0,0,345,347,7,
        6,0,0,346,345,1,0,0,0,347,348,1,0,0,0,348,346,1,0,0,0,348,349,1,
        0,0,0,349,350,1,0,0,0,350,351,6,39,0,0,351,80,1,0,0,0,9,0,273,299,
        306,314,318,326,337,348,1,6,0,0
    ]

class CHTLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IMPORT = 1
    NAMESPACE = 2
    CONFIGURATION = 3
    TEMPLATE = 4
    CUSTOM = 5
    AT_CHTL = 6
    AT_CONFIG = 7
    AT_STYLE = 8
    AT_ELEMENT = 9
    AT_VAR = 10
    INSERT = 11
    DELETE = 12
    AFTER = 13
    BEFORE = 14
    REPLACE = 15
    AT = 16
    TOP = 17
    BOTTOM = 18
    FROM = 19
    AS = 20
    STYLE_REF = 21
    SCRIPT_REF = 22
    STYLE = 23
    TEXT = 24
    NUMBER = 25
    DOT = 26
    LPAR = 27
    RPAR = 28
    LBRACE = 29
    RBRACE = 30
    LBRACK = 31
    RBRACK = 32
    COLON = 33
    EQ = 34
    SEMI = 35
    IDENTIFIER = 36
    STRING = 37
    LINE_COMMENT = 38
    BLOCK_COMMENT = 39
    WS = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'[Import]'", "'[Namespace]'", "'[Configuration]'", "'[Template]'",
            "'[Custom]'", "'@Chtl'", "'@Config'", "'@Style'", "'@Element'",
            "'@Var'", "'insert'", "'delete'", "'after'", "'before'", "'replace'",
            "'at'", "'top'", "'bottom'", "'from'", "'as'", "'__style_ref__'",
            "'__script_ref__'", "'style'", "'text'", "'.'", "'('", "')'",
            "'{'", "'}'", "'['", "']'", "':'", "'='", "';'" ]

    symbolicNames = [ "<INVALID>",
            "IMPORT", "NAMESPACE", "CONFIGURATION", "TEMPLATE", "CUSTOM",
            "AT_CHTL", "AT_CONFIG", "AT_STYLE", "AT_ELEMENT", "AT_VAR",
            "INSERT", "DELETE", "AFTER", "BEFORE", "REPLACE", "AT", "TOP",
            "BOTTOM", "FROM", "AS", "STYLE_REF", "SCRIPT_REF", "STYLE",
            "TEXT", "NUMBER", "DOT", "LPAR", "RPAR", "LBRACE", "RBRACE",
            "LBRACK", "RBRACK", "COLON", "EQ", "SEMI", "IDENTIFIER", "STRING",
            "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "IMPORT", "NAMESPACE", "CONFIGURATION", "TEMPLATE", "CUSTOM",
                  "AT_CHTL", "AT_CONFIG", "AT_STYLE", "AT_ELEMENT", "AT_VAR",
                  "INSERT", "DELETE", "AFTER", "BEFORE", "REPLACE", "AT",
                  "TOP", "BOTTOM", "FROM", "AS", "STYLE_REF", "SCRIPT_REF",
                  "STYLE", "TEXT", "NUMBER", "DOT", "LPAR", "RPAR", "LBRACE",
                  "RBRACE", "LBRACK", "RBRACK", "COLON", "EQ", "SEMI", "IDENTIFIER",
                  "STRING", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    grammarFileName = "CHTL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
