# Generated from grammars/CHTL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,207,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,4,10,131,8,10,11,
        10,12,10,132,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
        16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,5,19,153,8,19,10,19,12,19,
        156,9,19,1,20,1,20,5,20,160,8,20,10,20,12,20,163,9,20,1,20,1,20,
        1,20,5,20,168,8,20,10,20,12,20,171,9,20,1,20,3,20,174,8,20,1,21,
        1,21,1,21,1,21,5,21,180,8,21,10,21,12,21,183,9,21,1,21,1,21,1,22,
        1,22,1,22,1,22,5,22,191,8,22,10,22,12,22,194,9,22,1,22,1,22,1,22,
        1,22,1,22,1,23,4,23,202,8,23,11,23,12,23,203,1,23,1,23,1,192,0,24,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        1,0,7,1,0,48,57,3,0,65,90,95,95,97,122,5,0,45,45,48,57,65,90,95,
        95,97,122,1,0,34,34,1,0,39,39,2,0,10,10,13,13,3,0,9,10,13,13,32,
        32,214,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,49,1,0,0,
        0,3,60,1,0,0,0,5,69,1,0,0,0,7,76,1,0,0,0,9,85,1,0,0,0,11,90,1,0,
        0,0,13,97,1,0,0,0,15,104,1,0,0,0,17,118,1,0,0,0,19,124,1,0,0,0,21,
        130,1,0,0,0,23,134,1,0,0,0,25,136,1,0,0,0,27,138,1,0,0,0,29,140,
        1,0,0,0,31,142,1,0,0,0,33,144,1,0,0,0,35,146,1,0,0,0,37,148,1,0,
        0,0,39,150,1,0,0,0,41,173,1,0,0,0,43,175,1,0,0,0,45,186,1,0,0,0,
        47,201,1,0,0,0,49,50,5,91,0,0,50,51,5,84,0,0,51,52,5,101,0,0,52,
        53,5,109,0,0,53,54,5,112,0,0,54,55,5,108,0,0,55,56,5,97,0,0,56,57,
        5,116,0,0,57,58,5,101,0,0,58,59,5,93,0,0,59,2,1,0,0,0,60,61,5,91,
        0,0,61,62,5,67,0,0,62,63,5,117,0,0,63,64,5,115,0,0,64,65,5,116,0,
        0,65,66,5,111,0,0,66,67,5,109,0,0,67,68,5,93,0,0,68,4,1,0,0,0,69,
        70,5,64,0,0,70,71,5,83,0,0,71,72,5,116,0,0,72,73,5,121,0,0,73,74,
        5,108,0,0,74,75,5,101,0,0,75,6,1,0,0,0,76,77,5,64,0,0,77,78,5,69,
        0,0,78,79,5,108,0,0,79,80,5,101,0,0,80,81,5,109,0,0,81,82,5,101,
        0,0,82,83,5,110,0,0,83,84,5,116,0,0,84,8,1,0,0,0,85,86,5,64,0,0,
        86,87,5,86,0,0,87,88,5,97,0,0,88,89,5,114,0,0,89,10,1,0,0,0,90,91,
        5,105,0,0,91,92,5,110,0,0,92,93,5,115,0,0,93,94,5,101,0,0,94,95,
        5,114,0,0,95,96,5,116,0,0,96,12,1,0,0,0,97,98,5,100,0,0,98,99,5,
        101,0,0,99,100,5,108,0,0,100,101,5,101,0,0,101,102,5,116,0,0,102,
        103,5,101,0,0,103,14,1,0,0,0,104,105,5,95,0,0,105,106,5,95,0,0,106,
        107,5,115,0,0,107,108,5,116,0,0,108,109,5,121,0,0,109,110,5,108,
        0,0,110,111,5,101,0,0,111,112,5,95,0,0,112,113,5,114,0,0,113,114,
        5,101,0,0,114,115,5,102,0,0,115,116,5,95,0,0,116,117,5,95,0,0,117,
        16,1,0,0,0,118,119,5,115,0,0,119,120,5,116,0,0,120,121,5,121,0,0,
        121,122,5,108,0,0,122,123,5,101,0,0,123,18,1,0,0,0,124,125,5,116,
        0,0,125,126,5,101,0,0,126,127,5,120,0,0,127,128,5,116,0,0,128,20,
        1,0,0,0,129,131,7,0,0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,
        1,0,0,0,132,133,1,0,0,0,133,22,1,0,0,0,134,135,5,46,0,0,135,24,1,
        0,0,0,136,137,5,40,0,0,137,26,1,0,0,0,138,139,5,41,0,0,139,28,1,
        0,0,0,140,141,5,123,0,0,141,30,1,0,0,0,142,143,5,125,0,0,143,32,
        1,0,0,0,144,145,5,58,0,0,145,34,1,0,0,0,146,147,5,61,0,0,147,36,
        1,0,0,0,148,149,5,59,0,0,149,38,1,0,0,0,150,154,7,1,0,0,151,153,
        7,2,0,0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,
        1,0,0,0,155,40,1,0,0,0,156,154,1,0,0,0,157,161,5,34,0,0,158,160,
        8,3,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,
        1,0,0,0,162,164,1,0,0,0,163,161,1,0,0,0,164,174,5,34,0,0,165,169,
        5,39,0,0,166,168,8,4,0,0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,
        1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,174,
        5,39,0,0,173,157,1,0,0,0,173,165,1,0,0,0,174,42,1,0,0,0,175,176,
        5,47,0,0,176,177,5,47,0,0,177,181,1,0,0,0,178,180,8,5,0,0,179,178,
        1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,184,
        1,0,0,0,183,181,1,0,0,0,184,185,6,21,0,0,185,44,1,0,0,0,186,187,
        5,47,0,0,187,188,5,42,0,0,188,192,1,0,0,0,189,191,9,0,0,0,190,189,
        1,0,0,0,191,194,1,0,0,0,192,193,1,0,0,0,192,190,1,0,0,0,193,195,
        1,0,0,0,194,192,1,0,0,0,195,196,5,42,0,0,196,197,5,47,0,0,197,198,
        1,0,0,0,198,199,6,22,0,0,199,46,1,0,0,0,200,202,7,6,0,0,201,200,
        1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,205,
        1,0,0,0,205,206,6,23,0,0,206,48,1,0,0,0,9,0,132,154,161,169,173,
        181,192,203,1,6,0,0
    ]

class CHTLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TEMPLATE = 1
    CUSTOM = 2
    AT_STYLE = 3
    AT_ELEMENT = 4
    AT_VAR = 5
    INSERT = 6
    DELETE = 7
    STYLE_REF = 8
    STYLE = 9
    TEXT = 10
    NUMBER = 11
    DOT = 12
    LPAR = 13
    RPAR = 14
    LBRACE = 15
    RBRACE = 16
    COLON = 17
    EQ = 18
    SEMI = 19
    IDENTIFIER = 20
    STRING = 21
    LINE_COMMENT = 22
    BLOCK_COMMENT = 23
    WS = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'[Template]'", "'[Custom]'", "'@Style'", "'@Element'", "'@Var'",
            "'insert'", "'delete'", "'__style_ref__'", "'style'", "'text'",
            "'.'", "'('", "')'", "'{'", "'}'", "':'", "'='", "';'" ]

    symbolicNames = [ "<INVALID>",
            "TEMPLATE", "CUSTOM", "AT_STYLE", "AT_ELEMENT", "AT_VAR", "INSERT",
            "DELETE", "STYLE_REF", "STYLE", "TEXT", "NUMBER", "DOT", "LPAR",
            "RPAR", "LBRACE", "RBRACE", "COLON", "EQ", "SEMI", "IDENTIFIER",
            "STRING", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "TEMPLATE", "CUSTOM", "AT_STYLE", "AT_ELEMENT", "AT_VAR",
                  "INSERT", "DELETE", "STYLE_REF", "STYLE", "TEXT", "NUMBER",
                  "DOT", "LPAR", "RPAR", "LBRACE", "RBRACE", "COLON", "EQ",
                  "SEMI", "IDENTIFIER", "STRING", "LINE_COMMENT", "BLOCK_COMMENT",
                  "WS" ]

    grammarFileName = "CHTL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
