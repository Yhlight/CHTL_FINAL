
// Generated from grammar/CHTLJS.g4 by ANTLR 4.13.1


#include "CHTLJSLexer.h"


using namespace antlr4;

using namespace chtl.antlr;


using namespace antlr4;

namespace {

struct CHTLJSLexerStaticData final {
  CHTLJSLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CHTLJSLexerStaticData(const CHTLJSLexerStaticData&) = delete;
  CHTLJSLexerStaticData(CHTLJSLexerStaticData&&) = delete;
  CHTLJSLexerStaticData& operator=(const CHTLJSLexerStaticData&) = delete;
  CHTLJSLexerStaticData& operator=(CHTLJSLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag chtljslexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CHTLJSLexerStaticData *chtljslexerLexerStaticData = nullptr;

void chtljslexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (chtljslexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(chtljslexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CHTLJSLexerStaticData>(
    std::vector<std::string>{
      "VAR", "LET", "CONST", "FUNCTION", "IF", "ELSE", "FOR", "WHILE", "SWITCH", 
      "CASE", "DEFAULT", "BREAK", "CONTINUE", "RETURN", "THEN", "FILELOADER", 
      "LISTEN", "DELEGATE", "ANIMATE", "VIR", "ROUTER", "UTIL", "INEVERAWAY", 
      "LEFT_BRACE", "RIGHT_BRACE", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_PAREN", 
      "RIGHT_PAREN", "SEMICOLON", "COMMA", "DOT", "COLON", "QUESTION", "PLUS", 
      "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "AND", "OR", "NOT", "GREATER", 
      "LESS", "GREATER_EQUAL", "LESS_EQUAL", "EQUAL_EQUAL", "NOT_EQUAL", 
      "PLUS_EQUAL", "MINUS_EQUAL", "MULTIPLY_EQUAL", "DIVIDE_EQUAL", "MODULO_EQUAL", 
      "HASH", "ASTERISK", "DOUBLE_BRACE", "STRING", "NUMBER", "BOOLEAN", 
      "NULL", "UNDEFINED", "IDENTIFIER", "COMMENT", "MULTILINE_COMMENT", 
      "WHITESPACE"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'var'", "'let'", "'const'", "'function'", "'if'", "'else'", "'for'", 
      "'while'", "'switch'", "'case'", "'default'", "'break'", "'continue'", 
      "'return'", "'then'", "'fileloader'", "'listen'", "'delegate'", "'animate'", 
      "'vir'", "'router'", "'util'", "'iNeverAway'", "'{'", "'}'", "'['", 
      "']'", "'('", "')'", "';'", "','", "'.'", "':'", "'\\u003F'", "'+'", 
      "'-'", "", "'/'", "'%'", "'&&'", "'||'", "'!'", "'>'", "'<'", "'>='", 
      "'<='", "'=='", "'!='", "'+='", "'-='", "'*='", "'/='", "'%='", "'#'", 
      "", "", "", "", "", "'null'", "'undefined'"
    },
    std::vector<std::string>{
      "", "VAR", "LET", "CONST", "FUNCTION", "IF", "ELSE", "FOR", "WHILE", 
      "SWITCH", "CASE", "DEFAULT", "BREAK", "CONTINUE", "RETURN", "THEN", 
      "FILELOADER", "LISTEN", "DELEGATE", "ANIMATE", "VIR", "ROUTER", "UTIL", 
      "INEVERAWAY", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_BRACKET", "RIGHT_BRACKET", 
      "LEFT_PAREN", "RIGHT_PAREN", "SEMICOLON", "COMMA", "DOT", "COLON", 
      "QUESTION", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "AND", 
      "OR", "NOT", "GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", "EQUAL_EQUAL", 
      "NOT_EQUAL", "PLUS_EQUAL", "MINUS_EQUAL", "MULTIPLY_EQUAL", "DIVIDE_EQUAL", 
      "MODULO_EQUAL", "HASH", "ASTERISK", "DOUBLE_BRACE", "STRING", "NUMBER", 
      "BOOLEAN", "NULL", "UNDEFINED", "IDENTIFIER", "COMMENT", "MULTILINE_COMMENT", 
      "WHITESPACE"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,65,473,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
  	1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
  	9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
  	11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
  	13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
  	16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
  	18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
  	20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
  	22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
  	28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
  	35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,
  	41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,
  	47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,
  	51,1,52,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,55,1,55,3,55,361,8,
  	55,1,56,1,56,1,56,1,56,5,56,367,8,56,10,56,12,56,370,9,56,1,56,1,56,1,
  	56,1,56,1,56,5,56,377,8,56,10,56,12,56,380,9,56,1,56,3,56,383,8,56,1,
  	57,4,57,386,8,57,11,57,12,57,387,1,57,1,57,4,57,392,8,57,11,57,12,57,
  	393,3,57,396,8,57,1,57,1,57,3,57,400,8,57,1,57,4,57,403,8,57,11,57,12,
  	57,404,3,57,407,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,
  	418,8,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
  	1,60,1,60,1,60,1,61,1,61,5,61,437,8,61,10,61,12,61,440,9,61,1,62,1,62,
  	1,62,1,62,5,62,446,8,62,10,62,12,62,449,9,62,1,62,1,62,1,63,1,63,1,63,
  	1,63,5,63,457,8,63,10,63,12,63,460,9,63,1,63,1,63,1,63,1,63,1,63,1,64,
  	4,64,468,8,64,11,64,12,64,469,1,64,1,64,1,458,0,65,1,1,3,2,5,3,7,4,9,
  	5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
  	35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
  	29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
  	81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,
  	52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,
  	62,125,63,127,64,129,65,1,0,9,2,0,34,34,92,92,2,0,39,39,92,92,1,0,48,
  	57,2,0,69,69,101,101,2,0,43,43,45,45,4,0,36,36,65,90,95,95,97,122,5,0,
  	36,36,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,489,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
  	0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
  	0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
  	1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
  	0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
  	0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
  	1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
  	1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
  	1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,
  	1,0,0,0,0,129,1,0,0,0,1,131,1,0,0,0,3,135,1,0,0,0,5,139,1,0,0,0,7,145,
  	1,0,0,0,9,154,1,0,0,0,11,157,1,0,0,0,13,162,1,0,0,0,15,166,1,0,0,0,17,
  	172,1,0,0,0,19,179,1,0,0,0,21,184,1,0,0,0,23,192,1,0,0,0,25,198,1,0,0,
  	0,27,207,1,0,0,0,29,214,1,0,0,0,31,219,1,0,0,0,33,230,1,0,0,0,35,237,
  	1,0,0,0,37,246,1,0,0,0,39,254,1,0,0,0,41,258,1,0,0,0,43,265,1,0,0,0,45,
  	270,1,0,0,0,47,281,1,0,0,0,49,283,1,0,0,0,51,285,1,0,0,0,53,287,1,0,0,
  	0,55,289,1,0,0,0,57,291,1,0,0,0,59,293,1,0,0,0,61,295,1,0,0,0,63,297,
  	1,0,0,0,65,299,1,0,0,0,67,301,1,0,0,0,69,303,1,0,0,0,71,305,1,0,0,0,73,
  	307,1,0,0,0,75,309,1,0,0,0,77,311,1,0,0,0,79,313,1,0,0,0,81,316,1,0,0,
  	0,83,319,1,0,0,0,85,321,1,0,0,0,87,323,1,0,0,0,89,325,1,0,0,0,91,328,
  	1,0,0,0,93,331,1,0,0,0,95,334,1,0,0,0,97,337,1,0,0,0,99,340,1,0,0,0,101,
  	343,1,0,0,0,103,346,1,0,0,0,105,349,1,0,0,0,107,352,1,0,0,0,109,354,1,
  	0,0,0,111,360,1,0,0,0,113,382,1,0,0,0,115,385,1,0,0,0,117,417,1,0,0,0,
  	119,419,1,0,0,0,121,424,1,0,0,0,123,434,1,0,0,0,125,441,1,0,0,0,127,452,
  	1,0,0,0,129,467,1,0,0,0,131,132,5,118,0,0,132,133,5,97,0,0,133,134,5,
  	114,0,0,134,2,1,0,0,0,135,136,5,108,0,0,136,137,5,101,0,0,137,138,5,116,
  	0,0,138,4,1,0,0,0,139,140,5,99,0,0,140,141,5,111,0,0,141,142,5,110,0,
  	0,142,143,5,115,0,0,143,144,5,116,0,0,144,6,1,0,0,0,145,146,5,102,0,0,
  	146,147,5,117,0,0,147,148,5,110,0,0,148,149,5,99,0,0,149,150,5,116,0,
  	0,150,151,5,105,0,0,151,152,5,111,0,0,152,153,5,110,0,0,153,8,1,0,0,0,
  	154,155,5,105,0,0,155,156,5,102,0,0,156,10,1,0,0,0,157,158,5,101,0,0,
  	158,159,5,108,0,0,159,160,5,115,0,0,160,161,5,101,0,0,161,12,1,0,0,0,
  	162,163,5,102,0,0,163,164,5,111,0,0,164,165,5,114,0,0,165,14,1,0,0,0,
  	166,167,5,119,0,0,167,168,5,104,0,0,168,169,5,105,0,0,169,170,5,108,0,
  	0,170,171,5,101,0,0,171,16,1,0,0,0,172,173,5,115,0,0,173,174,5,119,0,
  	0,174,175,5,105,0,0,175,176,5,116,0,0,176,177,5,99,0,0,177,178,5,104,
  	0,0,178,18,1,0,0,0,179,180,5,99,0,0,180,181,5,97,0,0,181,182,5,115,0,
  	0,182,183,5,101,0,0,183,20,1,0,0,0,184,185,5,100,0,0,185,186,5,101,0,
  	0,186,187,5,102,0,0,187,188,5,97,0,0,188,189,5,117,0,0,189,190,5,108,
  	0,0,190,191,5,116,0,0,191,22,1,0,0,0,192,193,5,98,0,0,193,194,5,114,0,
  	0,194,195,5,101,0,0,195,196,5,97,0,0,196,197,5,107,0,0,197,24,1,0,0,0,
  	198,199,5,99,0,0,199,200,5,111,0,0,200,201,5,110,0,0,201,202,5,116,0,
  	0,202,203,5,105,0,0,203,204,5,110,0,0,204,205,5,117,0,0,205,206,5,101,
  	0,0,206,26,1,0,0,0,207,208,5,114,0,0,208,209,5,101,0,0,209,210,5,116,
  	0,0,210,211,5,117,0,0,211,212,5,114,0,0,212,213,5,110,0,0,213,28,1,0,
  	0,0,214,215,5,116,0,0,215,216,5,104,0,0,216,217,5,101,0,0,217,218,5,110,
  	0,0,218,30,1,0,0,0,219,220,5,102,0,0,220,221,5,105,0,0,221,222,5,108,
  	0,0,222,223,5,101,0,0,223,224,5,108,0,0,224,225,5,111,0,0,225,226,5,97,
  	0,0,226,227,5,100,0,0,227,228,5,101,0,0,228,229,5,114,0,0,229,32,1,0,
  	0,0,230,231,5,108,0,0,231,232,5,105,0,0,232,233,5,115,0,0,233,234,5,116,
  	0,0,234,235,5,101,0,0,235,236,5,110,0,0,236,34,1,0,0,0,237,238,5,100,
  	0,0,238,239,5,101,0,0,239,240,5,108,0,0,240,241,5,101,0,0,241,242,5,103,
  	0,0,242,243,5,97,0,0,243,244,5,116,0,0,244,245,5,101,0,0,245,36,1,0,0,
  	0,246,247,5,97,0,0,247,248,5,110,0,0,248,249,5,105,0,0,249,250,5,109,
  	0,0,250,251,5,97,0,0,251,252,5,116,0,0,252,253,5,101,0,0,253,38,1,0,0,
  	0,254,255,5,118,0,0,255,256,5,105,0,0,256,257,5,114,0,0,257,40,1,0,0,
  	0,258,259,5,114,0,0,259,260,5,111,0,0,260,261,5,117,0,0,261,262,5,116,
  	0,0,262,263,5,101,0,0,263,264,5,114,0,0,264,42,1,0,0,0,265,266,5,117,
  	0,0,266,267,5,116,0,0,267,268,5,105,0,0,268,269,5,108,0,0,269,44,1,0,
  	0,0,270,271,5,105,0,0,271,272,5,78,0,0,272,273,5,101,0,0,273,274,5,118,
  	0,0,274,275,5,101,0,0,275,276,5,114,0,0,276,277,5,65,0,0,277,278,5,119,
  	0,0,278,279,5,97,0,0,279,280,5,121,0,0,280,46,1,0,0,0,281,282,5,123,0,
  	0,282,48,1,0,0,0,283,284,5,125,0,0,284,50,1,0,0,0,285,286,5,91,0,0,286,
  	52,1,0,0,0,287,288,5,93,0,0,288,54,1,0,0,0,289,290,5,40,0,0,290,56,1,
  	0,0,0,291,292,5,41,0,0,292,58,1,0,0,0,293,294,5,59,0,0,294,60,1,0,0,0,
  	295,296,5,44,0,0,296,62,1,0,0,0,297,298,5,46,0,0,298,64,1,0,0,0,299,300,
  	5,58,0,0,300,66,1,0,0,0,301,302,5,63,0,0,302,68,1,0,0,0,303,304,5,43,
  	0,0,304,70,1,0,0,0,305,306,5,45,0,0,306,72,1,0,0,0,307,308,5,42,0,0,308,
  	74,1,0,0,0,309,310,5,47,0,0,310,76,1,0,0,0,311,312,5,37,0,0,312,78,1,
  	0,0,0,313,314,5,38,0,0,314,315,5,38,0,0,315,80,1,0,0,0,316,317,5,124,
  	0,0,317,318,5,124,0,0,318,82,1,0,0,0,319,320,5,33,0,0,320,84,1,0,0,0,
  	321,322,5,62,0,0,322,86,1,0,0,0,323,324,5,60,0,0,324,88,1,0,0,0,325,326,
  	5,62,0,0,326,327,5,61,0,0,327,90,1,0,0,0,328,329,5,60,0,0,329,330,5,61,
  	0,0,330,92,1,0,0,0,331,332,5,61,0,0,332,333,5,61,0,0,333,94,1,0,0,0,334,
  	335,5,33,0,0,335,336,5,61,0,0,336,96,1,0,0,0,337,338,5,43,0,0,338,339,
  	5,61,0,0,339,98,1,0,0,0,340,341,5,45,0,0,341,342,5,61,0,0,342,100,1,0,
  	0,0,343,344,5,42,0,0,344,345,5,61,0,0,345,102,1,0,0,0,346,347,5,47,0,
  	0,347,348,5,61,0,0,348,104,1,0,0,0,349,350,5,37,0,0,350,351,5,61,0,0,
  	351,106,1,0,0,0,352,353,5,35,0,0,353,108,1,0,0,0,354,355,5,42,0,0,355,
  	110,1,0,0,0,356,357,5,123,0,0,357,361,5,123,0,0,358,359,5,125,0,0,359,
  	361,5,125,0,0,360,356,1,0,0,0,360,358,1,0,0,0,361,112,1,0,0,0,362,368,
  	5,34,0,0,363,367,8,0,0,0,364,365,5,92,0,0,365,367,9,0,0,0,366,363,1,0,
  	0,0,366,364,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,
  	371,1,0,0,0,370,368,1,0,0,0,371,383,5,34,0,0,372,378,5,39,0,0,373,377,
  	8,1,0,0,374,375,5,92,0,0,375,377,9,0,0,0,376,373,1,0,0,0,376,374,1,0,
  	0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,380,
  	378,1,0,0,0,381,383,5,39,0,0,382,362,1,0,0,0,382,372,1,0,0,0,383,114,
  	1,0,0,0,384,386,7,2,0,0,385,384,1,0,0,0,386,387,1,0,0,0,387,385,1,0,0,
  	0,387,388,1,0,0,0,388,395,1,0,0,0,389,391,5,46,0,0,390,392,7,2,0,0,391,
  	390,1,0,0,0,392,393,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,396,1,
  	0,0,0,395,389,1,0,0,0,395,396,1,0,0,0,396,406,1,0,0,0,397,399,7,3,0,0,
  	398,400,7,4,0,0,399,398,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,403,
  	7,2,0,0,402,401,1,0,0,0,403,404,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,
  	0,405,407,1,0,0,0,406,397,1,0,0,0,406,407,1,0,0,0,407,116,1,0,0,0,408,
  	409,5,116,0,0,409,410,5,114,0,0,410,411,5,117,0,0,411,418,5,101,0,0,412,
  	413,5,102,0,0,413,414,5,97,0,0,414,415,5,108,0,0,415,416,5,115,0,0,416,
  	418,5,101,0,0,417,408,1,0,0,0,417,412,1,0,0,0,418,118,1,0,0,0,419,420,
  	5,110,0,0,420,421,5,117,0,0,421,422,5,108,0,0,422,423,5,108,0,0,423,120,
  	1,0,0,0,424,425,5,117,0,0,425,426,5,110,0,0,426,427,5,100,0,0,427,428,
  	5,101,0,0,428,429,5,102,0,0,429,430,5,105,0,0,430,431,5,110,0,0,431,432,
  	5,101,0,0,432,433,5,100,0,0,433,122,1,0,0,0,434,438,7,5,0,0,435,437,7,
  	6,0,0,436,435,1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,
  	439,124,1,0,0,0,440,438,1,0,0,0,441,442,5,47,0,0,442,443,5,47,0,0,443,
  	447,1,0,0,0,444,446,8,7,0,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,1,
  	0,0,0,447,448,1,0,0,0,448,450,1,0,0,0,449,447,1,0,0,0,450,451,6,62,0,
  	0,451,126,1,0,0,0,452,453,5,47,0,0,453,454,5,42,0,0,454,458,1,0,0,0,455,
  	457,9,0,0,0,456,455,1,0,0,0,457,460,1,0,0,0,458,459,1,0,0,0,458,456,1,
  	0,0,0,459,461,1,0,0,0,460,458,1,0,0,0,461,462,5,42,0,0,462,463,5,47,0,
  	0,463,464,1,0,0,0,464,465,6,63,0,0,465,128,1,0,0,0,466,468,7,8,0,0,467,
  	466,1,0,0,0,468,469,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,471,1,
  	0,0,0,471,472,6,64,0,0,472,130,1,0,0,0,18,0,360,366,368,376,378,382,387,
  	393,395,399,404,406,417,438,447,458,469,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  chtljslexerLexerStaticData = staticData.release();
}

}

CHTLJSLexer::CHTLJSLexer(CharStream *input) : Lexer(input) {
  CHTLJSLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *chtljslexerLexerStaticData->atn, chtljslexerLexerStaticData->decisionToDFA, chtljslexerLexerStaticData->sharedContextCache);
}

CHTLJSLexer::~CHTLJSLexer() {
  delete _interpreter;
}

std::string CHTLJSLexer::getGrammarFileName() const {
  return "CHTLJS.g4";
}

const std::vector<std::string>& CHTLJSLexer::getRuleNames() const {
  return chtljslexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CHTLJSLexer::getChannelNames() const {
  return chtljslexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CHTLJSLexer::getModeNames() const {
  return chtljslexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CHTLJSLexer::getVocabulary() const {
  return chtljslexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CHTLJSLexer::getSerializedATN() const {
  return chtljslexerLexerStaticData->serializedATN;
}

const atn::ATN& CHTLJSLexer::getATN() const {
  return *chtljslexerLexerStaticData->atn;
}




void CHTLJSLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  chtljslexerLexerInitialize();
#else
  ::antlr4::internal::call_once(chtljslexerLexerOnceFlag, chtljslexerLexerInitialize);
#endif
}
