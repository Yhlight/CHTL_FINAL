#pragma once

#include "CHTL/Common.h"
#include "CHTL/BaseNode.h"
#include <string>
#include <vector>
#include <memory>
#include <map>
#include <functional>

namespace CHTL {

// 前向声明
class CHTLJSLexer;
class CHTLJSParser;
class CHTLJSGenerator;
class CHTLJSContext;
class CHTLJSState;

/**
 * CHTL JS编译器 - 处理CHTL JS语法
 */
class CHTLJSCompiler {
public:
    // 编译选项
    struct CompileOptions {
        bool enableEnhancedSelectors = true;
        bool enableVirtualObjects = true;
        bool enableEventBinding = true;
        bool enableAnimations = true;
        bool enableRouting = true;
        bool enableDynamicExpressions = true;
        bool enableResponsiveValues = true;
        bool enableScriptLoader = true;
        bool enableDelegation = true;
        bool debugMode = false;
    };

    // 编译结果
    struct CompileResult {
        bool success;
        std::string jsOutput;
        std::string errorMessage;
        std::vector<std::string> warnings;
        std::shared_ptr<BaseNode> ast;
        
        CompileResult() : success(false) {}
    };

    // 增强选择器信息
    struct EnhancedSelector {
        std::string selector;
        std::string elementType; // tag, class, id, descendant, index
        std::string value;
        bool isAutoGenerated = false;
    };

    // 虚对象信息
    struct VirtualObject {
        std::string name;
        std::map<std::string, std::string> properties;
        std::map<std::string, std::function<std::string(const std::vector<std::string>&)>> methods;
    };

    // 事件绑定信息
    struct EventBinding {
        std::string elementSelector;
        std::string eventType;
        std::string handlerCode;
        bool isDelegated = false;
        std::string delegateTarget;
    };

    // 动画信息
    struct AnimationInfo {
        std::string targetSelector;
        int duration;
        std::string easing;
        std::map<std::string, std::string> beginState;
        std::vector<std::map<std::string, std::string>> keyframes;
        std::map<std::string, std::string> endState;
        int loopCount;
        std::string direction;
        int delay;
        std::string callback;
    };

    // 路由信息
    struct RouteInfo {
        std::string url;
        std::string pageSelector;
        std::string rootPath;
        std::string rootContainer;
        std::string mode; // history, hash
    };

public:
    CHTLJSCompiler();
    ~CHTLJSCompiler();

    /**
     * 编译CHTL JS代码
     * @param sourceCode 源代码
     * @param options 编译选项
     * @return 编译结果
     */
    CompileResult compile(const std::string& sourceCode, const CompileOptions& options = {});

    /**
     * 从AST生成代码
     * @param ast AST根节点
     * @param options 编译选项
     * @return 编译结果
     */
    CompileResult generateFromAST(std::shared_ptr<BaseNode> ast, const CompileOptions& options = {});

    /**
     * 设置上下文
     * @param context 上下文
     */
    void setContext(std::shared_ptr<CHTLJSContext> context);

    /**
     * 获取上下文
     * @return 上下文
     */
    std::shared_ptr<CHTLJSContext> getContext() const;

    /**
     * 处理增强选择器
     * @param selector 选择器表达式
     * @return 增强选择器信息
     */
    EnhancedSelector processEnhancedSelector(const std::string& selector);

    /**
     * 处理虚对象
     * @param objectName 对象名称
     * @param objectDefinition 对象定义
     * @return 虚对象信息
     */
    VirtualObject processVirtualObject(const std::string& objectName, 
                                     const std::map<std::string, std::string>& objectDefinition);

    /**
     * 处理事件绑定
     * @param elementSelector 元素选择器
     * @param eventType 事件类型
     * @param handlerCode 处理函数代码
     * @return 事件绑定信息
     */
    EventBinding processEventBinding(const std::string& elementSelector, 
                                   const std::string& eventType, 
                                   const std::string& handlerCode);

    /**
     * 处理事件委托
     * @param parentSelector 父元素选择器
     * @param targetSelectors 目标选择器列表
     * @param eventBindings 事件绑定列表
     * @return 委托代码
     */
    std::string processEventDelegation(const std::string& parentSelector, 
                                     const std::vector<std::string>& targetSelectors, 
                                     const std::vector<EventBinding>& eventBindings);

    /**
     * 处理动画
     * @param animationInfo 动画信息
     * @return 动画代码
     */
    std::string processAnimation(const AnimationInfo& animationInfo);

    /**
     * 处理路由
     * @param routeInfo 路由信息
     * @return 路由代码
     */
    std::string processRouting(const RouteInfo& routeInfo);

    /**
     * 处理动态属性条件表达式
     * @param expression 表达式
     * @param context 上下文
     * @return 处理后的表达式
     */
    std::string processDynamicConditionalExpression(const std::string& expression, 
                                                  const std::map<std::string, std::string>& context);

    /**
     * 处理响应式值
     * @param expression 表达式
     * @param context 上下文
     * @return 处理后的表达式
     */
    std::string processResponsiveValue(const std::string& expression, 
                                     const std::map<std::string, std::string>& context);

    /**
     * 处理脚本加载器
     * @param loadList 加载列表
     * @return 加载器代码
     */
    std::string processScriptLoader(const std::vector<std::string>& loadList);

    /**
     * 注册CJMOD函数
     * @param functionName 函数名称
     * @param functionDefinition 函数定义
     */
    void registerCJMODFunction(const std::string& functionName, 
                             const std::string& functionDefinition);

    /**
     * 获取注册的CJMOD函数
     * @param functionName 函数名称
     * @return 函数定义
     */
    std::string getCJMODFunction(const std::string& functionName) const;

private:
    // 初始化编译器组件
    void initializeComponents();
    
    // 词法分析
    std::vector<Token> tokenize(const std::string& sourceCode);
    
    // 语法分析
    std::shared_ptr<BaseNode> parse(const std::vector<Token>& tokens);
    
    // 语义分析
    void semanticAnalysis(std::shared_ptr<BaseNode> ast);
    
    // 代码生成
    CompileResult generateCode(std::shared_ptr<BaseNode> ast, const CompileOptions& options);
    
    // 特殊语法处理
    void processEnhancedSelectors(std::shared_ptr<BaseNode> ast);
    void processVirtualObjects(std::shared_ptr<BaseNode> ast);
    void processEventBindings(std::shared_ptr<BaseNode> ast);
    void processAnimations(std::shared_ptr<BaseNode> ast);
    void processRouting(std::shared_ptr<BaseNode> ast);
    void processDynamicExpressions(std::shared_ptr<BaseNode> ast);
    void processResponsiveValues(std::shared_ptr<BaseNode> ast);
    void processScriptLoader(std::shared_ptr<BaseNode> ast);
    
    // 选择器处理
    std::string generateSelectorCode(const EnhancedSelector& selector);
    std::string generateAutoSelector(const std::string& elementType, const std::string& value);
    
    // 虚对象处理
    std::string generateVirtualObjectCode(const VirtualObject& virtualObject);
    
    // 事件处理
    std::string generateEventBindingCode(const EventBinding& binding);
    std::string generateEventDelegationCode(const std::string& parentSelector, 
                                          const std::vector<EventBinding>& bindings);
    
    // 动画处理
    std::string generateAnimationCode(const AnimationInfo& animation);
    
    // 路由处理
    std::string generateRoutingCode(const RouteInfo& route);
    
    // 错误处理
    void handleError(const std::string& error, CompileResult& result);
    void handleWarning(const std::string& warning, CompileResult& result);

private:
    std::unique_ptr<CHTLJSLexer> lexer_;
    std::unique_ptr<CHTLJSParser> parser_;
    std::unique_ptr<CHTLJSGenerator> generator_;
    std::shared_ptr<CHTLJSContext> context_;
    std::unique_ptr<CHTLJSState> state_;
    
    // 注册表
    std::map<std::string, std::string> cjmodFunctions_;
    std::map<std::string, VirtualObject> virtualObjects_;
    std::map<std::string, EventBinding> eventBindings_;
    std::map<std::string, AnimationInfo> animations_;
    std::map<std::string, RouteInfo> routes_;
    
    // 编译选项
    CompileOptions currentOptions_;
    
    // 全局注册表
    std::map<std::string, std::vector<EventBinding>> eventDelegationRegistry_;
};

} // namespace CHTL